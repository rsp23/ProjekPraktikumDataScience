library(tidyverse)
library(magrittr)
library(purrr)
library(gridExtra)
library(ggpubr)
library(lubridate)
library(viridis)
library(maps)
library(VGAM)
library(vegan)
library(forecast)
library(xts)
library(GGally)
# For text tokenization
library(caret)
library(textclean)


library(shiny)
library(shinydashboard)
library(factoextra)
library(NbClust)
library(fpc)
library (ggplot2)
library(ggthemes)

options(warn = -1) # remove warning messages

commerce_bc <- read.csv('data.csv', encoding = "UTF-8")

# EDA ---------------------------------------------------------------------
# Missing values 
pMiss <- function(x){sum(is.na(x))/length(x)*100} #function to calculate missing values
apply(commerce_bc, 2, pMiss) # almost 25% of missing values in CustomerID column


# Cleanup -----------------------------------------------------------------
# Remove fees and adjustments 
commerce <- commerce_bc %>%
  filter(!grepl('amazon', Description, ignore.case = T) & !grepl('adjust', Description, ignore.case = T)) %>%
  filter(!is.na(CustomerID)) %>% #remove entries without customer encoding
  filter(!grepl('C', StockCode)) %>% #remove cancelled orders
  distinct() #remove duplicates (around 150.000 rows removed from original dataset)

# Retype columns 
commerce$Country <- factor(commerce$Country)
commerce$InvoiceDate <- as.POSIXct(commerce$InvoiceDate, tryFormats = '%m/%d/%Y %H:%M')

# Change factor labels 
commerce$StockCode <- fct_recode(commerce$StockCode, "Postage" = "POST", "Discount" = "D",
                                 "Carriage" = "C2", "Manual" = "M", "Bank Charges" = "BANK CHARGES",
                                 "Doctom Postage" = "DOT")

# Time related variables
commerce$date <- as.Date(commerce$InvoiceDate)
commerce$year <- format(commerce$date, '%Y')
commerce$month <- factor(format(commerce$date, '%b'), ordered = T, 
                         levels = c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                                    'Oct', 'Nov', 'Dec'))
commerce$quarter <- case_when(
  commerce$month %in% c('Jan', 'Feb', 'Mar') ~ 'Q1',
  commerce$month %in% c('Apr', 'May', 'Jun') ~ 'Q2',
  commerce$month %in% c('Jul', 'Aug', 'Sep') ~ 'Q3',
  commerce$month %in% c('Oct', 'Nov', 'Dec') ~ 'Q4',
  TRUE ~ 'Unknown'
)

commerce$quarter <- factor(commerce$quarter, ordered = T, levels =c('Q1', 'Q2', 'Q3', 'Q4'))
commerce$weeknd <- ifelse(weekdays(commerce$date) %in% c('Saturday', 'Sunday'), 'weekend', 'weekday')

commerce %<>% filter(!StockCode %in% c('Postage', 'Discount', 'Carriage', 'Manual', 'Bank Charges', 'Doctom Postage'))


# Total amount by invoice
comm_clean <- commerce %>% 
  group_by(CustomerID, Country, date, year, month, quarter, weeknd) %>% 
  summarise(InvoiceAmount = sum(Quantity * UnitPrice)) %>%
  filter(InvoiceAmount > 0) # drop article devolutions

# Outlier extraction (z-score formula)
x_median <- median(comm_clean$InvoiceAmount)
x_sd <- sd(comm_clean$InvoiceAmount, na.rm = T)
comm_clean %<>%
  filter(!(abs(InvoiceAmount - x_median) / x_sd) > 3) 

y_median <- median(commerce$UnitPrice, na.rm = T) 
y_sd <- sd(commerce$UnitPrice, na.rm = T)
commerce %<>%
  filter(!(abs(UnitPrice - y_median) / y_sd) > 3)



#VISUALISASI


### Aggregated plots 
options(repr.plot.width = 15, repr.plot.height = 10)
# by month 
pl1 <- comm_clean %>%
  filter(year == '2011') %>%
  group_by(month) %>% 
  mutate(xmean = mean(InvoiceAmount, na.rm = T),
         xmedian = median(InvoiceAmount, na.rm = T)) %>% 
  ggplot() +
  aes(x = InvoiceAmount, fill = month) +
  geom_density(alpha = 0.5) +
  geom_vline(aes(xintercept = xmean), lty = 2, col = 'red', size = 1.2) +
  geom_vline(aes(xintercept = xmedian), lty = 2, col = 'blue', size = 1.2) +
  theme_minimal() +
  theme(strip.text = element_text(size = 10),
        legend.position = 'none',
        #legend.text = element_text(size = 14),
        #legend.title = element_blank(),
        plot.title = element_text(size = 20, face = 'bold'),
        plot.subtitle = element_text(size = 12, face = 'italic'),
        axis.title = element_blank(),
        axis.text = element_text(size = 10, family = 'sans')) +
  xlim(0, 1000) +
  facet_wrap(~month, ncol = 1)

pl2 <- comm_clean %>%
  filter(year == '2011') %>%
  group_by(month) %>% 
  summarise(perc25 = quantile(InvoiceAmount, 0.25),
            xmedian = median(InvoiceAmount, na.rm = T),
            perc75 = quantile(InvoiceAmount, 0.75)) %>% 
  ggplot() +
  aes(x = fct_rev(month)) +
  
  # Draw segments
  geom_ribbon(aes(xmin = -Inf, xmax = Inf, ymin = perc25, ymax = xmedian, group = 1),
              fill = 'dodgerblue3', alpha = .7) +
  geom_ribbon(aes(xmin = -Inf, xmax = Inf, ymin = xmedian, ymax = perc75, group = 1),
              fill = 'dodgerblue1', alpha = .5) +
  
  # Draw lines
  geom_line(aes(y = xmedian, group = 1), col = 'red', size = 1.5) +
  geom_line(aes(y = perc25, group = 1), col = 'dodgerblue1', size = 1) +
  geom_line(aes(y = perc75, group = 1), col = 'dodgerblue4', size = 1) +
  geom_text(aes(y = xmedian + 30, label = round(xmedian, 2)), col = 'red', size = 4.2) +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_text(size = 10)) +
  coord_flip()

grid.arrange(pl1, pl2, layout_matrix = rbind(c(1, 1, 2),
                                             c(1, 1, 2)),
             top = grid::textGrob("Sales Amount by Month",
                                  gp = grid::gpar(fontsize = 24, face = 'bold.italic', font = 2)))


# by country
table(comm_clean$Country) # Countries with too few entries

filter_few <- table(comm_clean$Country) > 30
countries <- rownames(filter_few)
countries <- countries[filter_few]

world_map = map_data("world")
to_world <- comm_clean %>% 
  group_by(Country) %>% 
  summarise(InvoiceAmount = log(sum(InvoiceAmount, na.rm = T))) %>% 
  mutate(Country = fct_recode(Country, "UK" = "United Kingdom", 'Ireland' = 'EIRE')) %>% 
  right_join(world_map, by = c("Country" = "region"))


# by country worldmap
options(repr.plot.width = 20, repr.plot.height = 11) #resize for worldmap
to_world %>%
  ggplot(aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill=InvoiceAmount), colour = "grey50") +
  theme_void() +
  scale_fill_viridis(option = 'C', na.value = 'grey90')


# Wordcloud ---------------------------------------------------------------
library(tm)
library(tidytext)
library(ggwordcloud)

# Remove: stopwords in ENG
eng_stop = stopwords("eng")

# tokenize Commerce db sentences 
comm_txt <- commerce %>% 
  mutate(Description = as.character(Description)) %>%
  unnest_tokens(input = Description, text, token = 'words') %>% 
  mutate(text = tolower(text)) %>% 
  group_by(text) %>% 
  filter(!text %in% eng_stop) %>% # remove stopwords 
  filter(!grepl("[0-9]", text)) %>%  # remove rows with some numbers 
  filter(!is.na(CustomerID)) %>% # Remove unknown customers 
  filter(text != 'abc') %>%
  filter(nchar(text) > 1) %>% # remove characters
  summarise(freq = n()) %>% 
  arrange(desc(freq))

set.seed(5)
options(repr.plot.width = 21, repr.plot.height = 6)
head(comm_txt, 100) %>% 
  ggplot() +
  aes(label = text, size = freq, col = freq) +
  geom_text_wordcloud() +
  scale_size_area(max_size = 15) +
  #scale_color_gradient(low = '#66e6ff', high = '#003ca1') +
  scale_color_viridis(option = 'D', direction = -1) +    
  theme_minimal()



#CLUSTERING


# Power transformation (Yeo-Johnson)
comm_clean$InvoiceAmount <- yeo.johnson(comm_clean$InvoiceAmount, lambda = 0.2)
commerce$UnitPrice <- yeo.johnson(commerce$UnitPrice, lambda = 0.2)


# Tokenize description sentences 
product_txt <- commerce %>% 
  filter(UnitPrice > 0) %>% 
  mutate(Description = as.character(Description)) %>%
  unnest_tokens(input = Description, text, token = 'words') %>% 
  mutate(text = tolower(text)) %>% 
  group_by(StockCode, text) %>% 
  filter(!text %in% eng_stop) %>% # remove stopwords 
  filter(!grepl("[0-9]", text)) %>%  # remove rows with some numbers 
  filter(!is.na(CustomerID)) %>% # Remove unknown customers 
  filter(text != 'abc') %>%
  filter(nchar(text) > 1)
#%>% # remove characters
#summarise(freq = n()) %>% 
#arrange(desc(freq))





# Cleanup the text 
to_remove <- c('pink', 'red', 'blue', 'orange', 'white', 'yellow', 'des', 'blackblue')
commerce$Description <- as.character(commerce$Description)
commerce %<>%  
  mutate(Description = tolower(Description),
         Description = removePunctuation(Description),
         Description = removeNumbers(Description),
         Description = mgsub(Description, to_remove, ''),
         Description = gsub(' +', ' ', Description), # remove extra whitespaces
         Description = gsub("^[[:space:]]*", "", Description), # remove leading space
         Description = gsub("[[:space:]]*$", "", Description)) # remove trailing whitespaces







desc <- unique(commerce$Description) 

desc <- desc[nchar(desc) > 1]
desc2 <- tibble(text = desc) %>% 
  mutate(tokens = str_split(text, '\\s+')) %>% 
  unnest(tokens)

for(unique_value in unique(desc2$tokens)){
  desc2[paste(unique_value)] <- ifelse(desc2$tokens == unique_value, 1, 0)
}

desc_colnames <- colnames(desc2)
desc_colnames <- desc_colnames[nchar(desc_colnames) > 2]
desc2 <- desc2[,desc_colnames]
desc2 <- desc2[,!names(desc2) == 'tokens']

desc_agg <- aggregate(desc2[,-1], by = list(desc2$text), FUN = sum)
# Remove columns with less than 10 entries 
desc_agg2 <- desc_agg[,colSums(desc_agg[,-1]) > 10] # from 2239 to 333 columns
colnames(desc_agg2)[1] <- 'Description'
# add price unit 
commerce_coll <- commerce %>% 
  group_by(Description) %>% 
  filter(UnitPrice > 0) %>% 
  summarise(UnitPrice = mean(UnitPrice, na.rm = T))

# UnitPrice by categories (should be encoded to run kmeans properly)
#desc_agg2 <- desc_agg2 %>% 
#  left_join(commerce_coll, by = c('Description')) %>% 
#  filter(!is.na(UnitPrice)) %>%
#  mutate(UnitPrice = (UnitPrice - min(UnitPrice)) /(max(UnitPrice) - min(UnitPrice)))

min_com = min(commerce$UnitPrice)
max_com = max(commerce$UnitPrice)

commerce_coll <- commerce %>% 
  filter(UnitPrice > 0) %>% 
  mutate(UnitPrice = ((UnitPrice - min_com) /(max_com - min_com))) %>% 
  group_by(Description) %>% 
  summarise(UnitPrice = mean(UnitPrice, na.rm = T))

desc_agg3 <- desc_agg2 %>% 
  left_join(commerce_coll, by = c('Description')) %>% 
  filter(!is.na(UnitPrice))




#1. K-means ----------------------------------------------------------------------
desc_agg3 %<>% replace(is.na(.), 0) 
rownames(desc_agg3) <- desc_agg3[,1]
desc_def <- desc_agg3[,-1]
desc_def <- desc_def[,colSums(desc_def) >= 30]



# Libraries for PCA and kmeans
library(cluster)
library(klaR)
library(ggfortify)
library(factoextra)

pca.fit <- prcomp(desc_def)
wss <- function(k) {
  kmeans(pca.fit$x[,c(1:3)], k, nstart = 10)$tot.withinss
}

# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15

k2 <- stats::kmeans(pca.fit$x[,c(1:3)], 4, nstart = 25)

# Unit Price by cluster 

fviz_cluster(k2, data = pca.fit$x[,1:2]) + 
  theme_minimal() + 
  theme(axis.text = element_text(size = 14),
        axis.title = element_text(size = 12),
        legend.title = element_text(size = 16, face = 'italic'),
        legend.text = element_text(size = 13),
        plot.title = element_text(size = 20))



#RFM



comm_rfm <- commerce %>% 
  filter(!is.na(CustomerID) & UnitPrice > 0 & Quantity > 0) %>%
  group_by(InvoiceNo, CustomerID, date, Country) %>%
  summarise(Quantity = sum(Quantity, na.rm = T),
            InvoiceAmount = sum(Quantity * UnitPrice)) %>%
  ungroup() %>%
  group_by(CustomerID) %>%
  mutate(CustomerID = as.factor(CustomerID)) %>%
  summarise(Recency = as.numeric(as.Date('2011-12-31') - max(date)),
            Frequency = n_distinct(InvoiceNo),
            Monetary = sum(InvoiceAmount, na.rm = T)/Frequency)




row.names(comm_rfm) <- comm_rfm$CustomerID 
comm_rfm$CustomerID <- NULL
comm_norm <- scale(comm_rfm) # normalize

k1 <- kmeans(comm_norm, 4, nstart = 10)
paste('Summary for this k-means model with 4 centroids')
paste('The size of each cluster is: '); k1$size
paste('Between-cluster sum of squares: ', k1$betweenss)
paste('Total within-cluster sum of squares: ', k1$tot.withinss)

fviz_cluster(k1, data = comm_rfm[,1:3]) + 
  theme_minimal() + 
  theme(axis.text = element_text(size = 14),
        axis.title = element_text(size = 12),
        legend.title = element_text(size = 16, face = 'italic'),
        legend.text = element_text(size = 13),
        plot.title = element_text(size = 20))







